import re
import sqlite3

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove

from create_bot import bot, dp
from keyboards.client_kb import keyboard_next, keyboard_start_2, keyboard_cancel, keyboard_yes_no, \
    keyboard_children_number, keyboard_group_type, keyboard_activity, keyboard_age, keyboard_activity_2, keyboard_young, \
    keyboard_old, keyboard_v
from loging import printl

"""–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º

    group_id:-1002030571529
    
    870903130 –°—Ç–∞—Ä—É—Ö–∏–Ω–∞ –ê–Ω–Ω–∞ arumitapro
    
    6532995976 –°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞ synergidobra
    
    –ò–≤–∞–Ω –ù–µ—Ä–µ—Ç–∏–Ω 1085385124
"""

from aiogram.dispatcher.filters.state import StatesGroup, State


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –§–ò–û
def is_valid_name(name):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ò–û: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–ª–æ–≤–∞
    pattern = r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+\s[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+(\s[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+)?$'
    return bool(re.match(pattern, name))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
    pattern = r'^(?:\+7|8)\d{10}$'
    return bool(re.match(pattern, phone))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
def is_valid_email(email):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


@dp.message_handler(commands=['start', 'help'])
async def start_bot(message: types.Message):
    print(message.from_user.id, message.from_user.full_name, message.from_user.username)
    printl(message.from_user.id, message.from_user.full_name, message.from_user.username)
    photo = open('photo_2024-03-23 20.04.59.jpeg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption=f'''<b>–°–∏–Ω–µ—Ä–≥–∏—è –¥–æ–±—Ä–∞</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å. 
–ú—ã —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∂–µ–ª–∞—é—â–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∂–µ–Ω—â–∏–Ω –∏ –¥–µ—Ç–µ–π –Ω–∞—à–∏—Ö –±–æ–π—Ü–æ–≤.
''', parse_mode=types.ParseMode.HTML)
    await bot.send_message(message.from_user.id,
                           f'''–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ <b>–°–∏–Ω–µ—Ä–≥–∏–∏ –¥–æ–±—Ä–∞</b>! –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —ç—Ç–æ –∑–∞–π–º–µ—Ç —É –≤–∞—Å –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. ''',
                           parse_mode=types.ParseMode.HTML,
                           reply_markup=keyboard_next)  # ReplyKeyboardRemove


#     await bot.send_message(message.from_user.id,
#                            f'''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
# https://sinergidobra.ru/privacy
#
# –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –µ–≥–æ —É—Å–ª–æ–≤–∏—è–º–∏.''',
#                            parse_mode=types.ParseMode.HTML,
#                            reply_markup=keyboard_next)


@dp.message_handler(Text(equals='üîù –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', ignore_case=True))
async def main(message: types.Message):
    photo = open('photo_2024-03-23 20.04.59.jpeg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo,
                         caption='''–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ <b>–°–∏–Ω–µ—Ä–≥–∏–∏ –¥–æ–±—Ä–∞</b>! –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —ç—Ç–æ –∑–∞–π–º–µ—Ç —É –≤–∞—Å –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. ''',
                         parse_mode=types.ParseMode.HTML,
                         reply_markup=ReplyKeyboardRemove())
    await bot.send_message(message.from_user.id,
                           f'''–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ.

–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - —Ö–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.''',
                           reply_markup=keyboard_start_2)


@dp.message_handler(Text(equals='üîô –ù–∞–∑–∞–¥', ignore_case=True))
async def back(message: types.Message):
    await main(message)


@dp.message_handler(Text(equals='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', ignore_case=True))
async def get_contacts(message: types.Message):
    sent_message = await bot.send_message(message.from_user.id, '–°—É–ø–µ—Ä', reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(message.chat.id, sent_message.message_id)
    await bot.send_message(message.from_user.id,
                           f'''–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ.

–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - —Ö–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.''',
                           reply_markup=keyboard_start_2)
    printl(message.from_user.id, message.from_user.username, message.from_user.full_name)


@dp.message_handler(Text(equals='–°–æ—Ü—Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞', ignore_case=True))
async def get_contacts(message: types.Message):
    await bot.send_message(message.from_user.id, f'''–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º ¬´<b>–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞</b>¬ªü´∂üèªüá∑üá∫

–°–∞–π—Ç: https://sinergidobra.ru/

–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ ¬´<b>–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞</b>¬ª: https://t.me/sinergidobra''', parse_mode=types.ParseMode.HTML, )


@dp.message_handler(Text(equals='–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã', ignore_case=True))
async def get_contact(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '''–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
    await bot.send_message(message.from_user.id,
                           f'@synergidobra')


@dp.callback_query_handler(lambda c: c.data.startswith(''))
async def process_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    data = callback_query.data
    if data == "–°–æ—Ü—Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞":
        await get_contacts(callback_query)
    elif data == "–•–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å":
        await start_survey_22(callback_query)
    elif data == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ":
        await start_survey(callback_query)


class AnketForm(StatesGroup):
    name = State()
    svr_participation = State()
    svr_phone = State()
    svr_email = State()
    svr_date_born = State()
    svr_address = State()
    svr_social = State()
    children = State()
    children_number = State()
    children_age = State()
    about = State()


@dp.message_handler(Text(equals='–•–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', ignore_case=True))
async def start_survey_22(message: types.Message):
    await bot.send_message(message.from_user.id, "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)",
                           reply_markup=keyboard_cancel)
    await AnketForm.name.set()


@dp.message_handler(Text(equals='x–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', ignore_case=True))
async def start_survey_222(message: types.Message):
    await bot.send_message(message.from_user.id, "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)",
                           reply_markup=keyboard_cancel)
    await AnketForm.name.set()


# Asking for name
@dp.message_handler(state=AnketForm.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data.update({
            'name': message.text,
            'svr_participation': None,
            'svr_phone': None,
            'svr_email': None,
            'svr_date_born': None,
            'svr_address': None,
            'svr_social': None,
            'children': None,
            'children_number': None,
            'children_age': None,
            'about': None
        })
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    if not is_valid_name(message.text.lower()):
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_cancel)
        await state.set_state(AnketForm.name)
        return

    await state.update_data(name=message.text)
    await bot.send_message(message.from_user.id,
                           f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n"
                           "–í–ø–µ—Ä–µ–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–Ω–∏ –ø—Ä–æ–ª–µ—Ç—è—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ. –ü–æ–µ—Ö–∞–ª–∏!")

    await bot.send_message(message.from_user.id, "–£—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —á–ª–µ–Ω –≤–∞—à–µ–π —Å–µ–º—å–∏ –≤ –°–í–û?", reply_markup=keyboard_yes_no)
    await AnketForm.next()


# Asking SVR participation
@dp.message_handler(state=AnketForm.svr_participation)
async def process_svr_participation(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚Ä¶", reply_markup=keyboard_yes_no)
        await state.set_state(AnketForm.svr_participation)
        return

    svr_participation = message.text.lower() == '–¥–∞'
    await state.update_data(svr_participation=svr_participation)
    async with state.proxy() as data:
        data['svr_participation'] = message.text
    if svr_participation:

        await message.answer("–ù—É –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –í–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏ –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ:")

        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç: +79030000009).",
                             reply_markup=keyboard_cancel)
        await AnketForm.svr_phone.set()
    else:
        await save_data_to_database(state, message)
        await message.answer('''–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—É! üå∏
–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞. –£ –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞.''',
                             reply_markup=keyboard_v)
        await state.finish()


# Asking for SVR phone
@dp.message_handler(state=AnketForm.svr_phone)
async def process_svr_phone(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    if not is_valid_phone(message.text.lower()):
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_cancel)
        await state.set_state(AnketForm.svr_phone)
        return
    async with state.proxy() as data:
        data['svr_phone'] = message.text
    await state.update_data(svr_phone=message.text)
    await bot.send_message(message.from_user.id, "–ê —Ç–∞–∫–∂–µ –í–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã: example@gmail.com).",
                           reply_markup=keyboard_cancel)
    await AnketForm.svr_email.set()


# Asking for SVR email
@dp.message_handler(state=AnketForm.svr_email)
async def process_svr_email(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    if not is_valid_email(message.text.lower()):
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_cancel)
        await state.set_state(AnketForm.svr_email)
        return
    async with state.proxy() as data:
        data['svr_email'] = message.text
    await state.update_data(svr_email=message.text)
    await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º –≤–ø–∏—Å–∞—Ç—å –í–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.",
                           reply_markup=keyboard_cancel)
    await AnketForm.svr_address.set()


# Asking for SVR telegram
@dp.message_handler(state=AnketForm.svr_address)
async def process_svr_address(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['svr_address'] = message.text
    await state.update_data(svr_address=message.text)
    await bot.send_message(message.from_user.id, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.",
                           reply_markup=keyboard_cancel)
    await AnketForm.svr_date_born.set()


@dp.message_handler(state=AnketForm.svr_date_born)
async def process_svr_date_born(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['svr_date_born'] = message.text
    await state.update_data(svr_date_born=message.text)
    await bot.send_message(message.from_user.id, "–ü–æ –∂–µ–ª–∞–Ω–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –í–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ (–≤–∫, —Å–∞–π—Ç).",
                           reply_markup=keyboard_cancel)
    await AnketForm.svr_social.set()


# Asking for SVR social
@dp.message_handler(state=AnketForm.svr_social)
async def process_svr_social(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['svr_social'] = message.text
    await state.update_data(svr_social=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –¥–µ—Ç–∏?", reply_markup=keyboard_yes_no)
    await AnketForm.children.set()


# Asking for children
@dp.message_handler(state=AnketForm.children)
async def process_children(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚Ä¶", reply_markup=keyboard_yes_no)
        await state.set_state(AnketForm.children)
        return
    children = message.text.lower() == '–¥–∞'

    async with state.proxy() as data:
        data['children'] = message.text
        print(data['children'])
    await state.update_data(children=children)

    if children:
        await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–µ—Ç–µ–π?", reply_markup=keyboard_children_number)
        await AnketForm.children_number.set()
    else:
        await save_data_to_database(state, message)
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—É! üå∏")
        await state.finish()

@dp.message_handler(state=AnketForm.children)
async def process_children(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚Ä¶", reply_markup=keyboard_yes_no)
        await state.set_state(AnketForm.children)
        return
    children = message.text.lower() == '–¥–∞'

    async with state.proxy() as data:
        data['children'] = message.text
        print(data['children'])
    await state.update_data(children=children)

    if children:
        await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–µ—Ç–µ–π?", reply_markup=keyboard_children_number)
        await AnketForm.children_number.set()
    else:
        await save_data_to_database(state, message)
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—É! üå∏")
        await state.finish()


# Asking for children number
@dp.message_handler(state=AnketForm.children_number)
async def process_children_number(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['children_number'] = message.text

    await state.update_data(children_number=message.text)
    await message.answer(
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–µ—Ç–µ–π (–ø—Ä–∏–º–µ—Ä: —Ä–µ–±–µ–Ω–æ–∫ 1: 01.02.2009, —Ä–µ–±–µ–Ω–æ–∫ 2: 05.06.2017 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    await AnketForm.children_age.set()

@dp.message_handler(state=AnketForm.children_age)
async def process_children_age(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['children_age'] = message.text

    await state.update_data(children_number=message.text)
    await message.answer(
        """–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
–û —Å–µ–±–µ: (–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è)""")
    await AnketForm.about.set()

# Asking for children age
@dp.message_handler(state=AnketForm.about)
async def process_about(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['about'] = message.text
    await state.update_data(children_age=message.text)
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—Éüôèüèª\n"
                         "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n"
                         "–° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüíü")

    await save_data_to_database(state, message)
    await state.finish()


# //////////////////////////////////////////////////////////////////////////////////////

class AnketForm_2(StatesGroup):
    name = State()
    svr_phone = State()
    svr_email = State()
    svr_telegram = State()
    svr_social = State()
    activity = State()
    activity_type_adults = State()
    activity_type_children = State()
    master_class_description = State()
    age_category = State()
    group_type = State()
    participant_count = State()
    free_classes_count = State()


# Start conversation
@dp.message_handler(Text(equals='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ', ignore_case=True))
async def start_survey(message: types.Message):
    await bot.send_message(message.from_user.id, "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)",
                           reply_markup=keyboard_cancel)
    await AnketForm_2.name.set()


@dp.message_handler(Text(equals='–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ', ignore_case=True))
async def start_survey33(message: types.Message):
    await bot.send_message(message.from_user.id, "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)",
                           reply_markup=keyboard_cancel)
    await AnketForm_2.name.set()


# Asking for name
@dp.message_handler(state=AnketForm_2.name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    if not is_valid_name(message.text.lower()):
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_cancel)
        await state.set_state(AnketForm_2.name)
        return

    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n"
                         "–í–ø–µ—Ä–µ–¥–∏ –≤—Å–µ–≥–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–Ω–∏ –ø—Ä–æ–ª–µ—Ç—è—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ. –ü–æ–µ—Ö–∞–ª–∏!")

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç: +79030000009).",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.svr_phone.set()


# Asking for phone number
@dp.message_handler(state=AnketForm_2.svr_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)

    if not is_valid_phone(message.text.lower()):
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_cancel)
        await state.set_state(AnketForm_2.svr_phone)
        return

    async with state.proxy() as data:
        data['svr_phone'] = message.text

    await message.answer("–ê —Ç–∞–∫–∂–µ –í–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (–§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã: example@gmail.com).",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.svr_email.set()


# Asking for email
@dp.message_handler(state=AnketForm_2.svr_email)
async def process_email(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    if not is_valid_email(message.text.lower()):
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_cancel)
        await state.set_state(AnketForm_2.svr_email)
        return
    async with state.proxy() as data:
        data['svr_email'] = message.text

    await message.answer("–¢—É—Ç –ø—Ä–æ—Å–∏–º –≤–ø–∏—Å–∞—Ç—å –í–∞—à –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.svr_telegram.set()


# Asking for telegram nickname
@dp.message_handler(state=AnketForm_2.svr_telegram)
async def process_telegram(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['svr_telegram'] = message.text

    await message.answer("–ü–æ –∂–µ–ª–∞–Ω–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –í–∞—à –ø—Ä–æ–µ–∫—Ç, —Å–∞–π—Ç –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç–∏ (–≤–∫, —Å–∞–π—Ç).",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.svr_social.set()


# Asking for social links
@dp.message_handler(state=AnketForm_2.svr_social)
async def process_social(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['svr_social'] = message.text

    await message.answer("–ù—É –∞ —Ç–µ–ø–µ—Ä—å –ø—è—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –í–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏ –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ:",
                         reply_markup=keyboard_cancel)

    await message.answer("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å–æ –≤–∑—Ä–æ—Å–ª—ã–º–∏ –∏–ª–∏ –¥–µ—Ç—å–º–∏?", reply_markup=keyboard_age)
    await AnketForm_2.activity.set()


# Asking for activity
@dp.message_handler(state=AnketForm_2.activity)
async def process_activity(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    if message.text.lower() not in ["–≤–∑—Ä–æ—Å–ª—ã–µ", "–¥–µ—Ç–∏"]:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚Ä¶", reply_markup=keyboard_age)
        await state.set_state(AnketForm_2.activity)
        return
    async with state.proxy() as data:
        if message.text.lower() == '–≤–∑—Ä–æ—Å–ª—ã–µ':
            data['svr_participation'] = '–≤–∑—Ä–æ—Å–ª—ã–µ'
            await message.answer("–í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–æ –≤–∑—Ä–æ—Å–ª—ã–º–∏)?", reply_markup=keyboard_activity)
            await AnketForm_2.activity_type_adults.set()
        else:
            data['svr_participation'] = '–¥–µ—Ç–∏'
            await message.answer("–í–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å –¥–µ—Ç—å–º–∏)?", reply_markup=keyboard_activity_2)
            await AnketForm_2.activity_type_children.set()


# Asking for activity type with adults
@dp.message_handler(state=AnketForm_2.activity_type_adults)
async def process_activity_type_adults(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['activity'] = message.text

    await message.answer('''–ö–∞–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏ –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å?
    
–°–æ–≤—Å–µ–º –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –Ω–∞ –≤–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö. –ß—Ç–æ–±—ã –Ω–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.''',
                         reply_markup=keyboard_cancel)
    await AnketForm_2.master_class_description.set()


# Asking for activity type with children
@dp.message_handler(state=AnketForm_2.activity_type_children)
async def process_activity_type_children(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['activity'] = message.text

    await message.answer("–ö–∞–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏ –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å?",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.master_class_description.set()


# Asking for master class description
@dp.message_handler(state=AnketForm_2.master_class_description)
async def process_master_class_description(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['master_class_description'] = message.text
        if data['svr_participation'] == '–≤–∑—Ä–æ—Å–ª—ã–µ':
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?",
                                 reply_markup=keyboard_old)
        else:
            await message.answer("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?",
                                 reply_markup=keyboard_young)
    await AnketForm_2.age_category.set()


# Asking for age category
@dp.message_handler(state=AnketForm_2.age_category)
async def process_age_category(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['age_category'] = message.text

    await message.answer("–ó–∞–Ω—è—Ç–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ?", reply_markup=keyboard_group_type)
    await AnketForm_2.group_type.set()


# Asking for group type
@dp.message_handler(state=AnketForm_2.group_type)
async def process_group_type(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['group_type'] = message.text
        if data['group_type'].lower() == '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ':
            data['participant_count'] = '1'
            await message.answer("–°–∫–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –≤ –º–µ—Å—è—Ü –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–π –æ—Å–Ω–æ–≤–µ?",
                                 reply_markup=keyboard_cancel)
            await AnketForm_2.free_classes_count.set()
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?",
                                 reply_markup=keyboard_cancel)
            await AnketForm_2.participant_count.set()


# Asking for participant count
@dp.message_handler(state=AnketForm_2.participant_count)
async def process_participant_count(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['participant_count'] = message.text

    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –≤ –º–µ—Å—è—Ü –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–π –æ—Å–Ω–æ–≤–µ?",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.free_classes_count.set()


# Asking for free classes count
@dp.message_handler(state=AnketForm_2.free_classes_count)
async def process_free_classes_count(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['free_classes_count'] = message.text

    # Saving data to the database
    await save_user_data_2(state, message)

    # Sending completion message
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—Éüôèüèª\n"
                         "–ë—É–¥–µ–º —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—Éü§ù\n"
                         "–° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüíü")
    await state.finish()


async def save_data_to_database(state: FSMContext, message):
    async with state.proxy() as data:
        conn = sqlite3.connect('my_db_path.db')
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO answers (user_id, nik_name, full_name, name, svr_participation, svr_phone, svr_email, svr_address,  svr_date_born,
                           svr_social, children, children_number, children_age, about) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (message.from_user.id, message.from_user.username, message.from_user.full_name, data['name'],
                        data['svr_participation'], data['svr_phone'], data['svr_email'],
                        data['svr_address'], data['svr_date_born'], data['svr_social'], data['children'],
                        data['children_number'],
                        data['children_age'], data['about']))
        conn.commit()
        conn.close()


async def save_user_data_2(state: FSMContext, message):
    async with state.proxy() as data:
        conn = sqlite3.connect('my_db_path_2.db')
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO users 
                          (user_id, nik_name, full_name, name, svr_phone, svr_email, svr_telegram, svr_social, svr_participation,
                           activity, master_class_description, age_category, group_type,
                           participant_count, free_classes_count) 
                          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (message.from_user.id, message.from_user.username, message.from_user.full_name, data['name'],
                        data['svr_phone'], data['svr_email'], data['svr_telegram'], data['svr_social'],
                        data['svr_participation'],
                        data['activity'], data['master_class_description'],
                        data['age_category'], data['group_type'], data['participant_count'],
                        data['free_classes_count']))
        conn.commit()
        conn.close()


def handlers_register(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands=['start', 'help'])
    dp.register_message_handler(main, commands=['main'])
    dp.register_message_handler(start_survey, commands=['volunteering'])
    dp.register_message_handler(start_survey_22, commands=['master_class'])
    dp.register_message_handler(get_contacts, commands=['networks'])
    dp.register_message_handler(get_contact, commands=['care_service'])
