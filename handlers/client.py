from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove

from create_bot import bot, dp
from keyboards.client_kb import keyboard_next, keyboard_start_2, keyboard_start, keyboard_cancel, keyboard_cancel_age
from loging import printl
from order_DB import Orders, Orders2

"""–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º

    group_id:-1002030571529
    
    –ò–≤–∞–Ω –ù–µ—Ä–µ—Ç–∏–Ω 1085385124
"""

from aiogram.dispatcher.filters.state import StatesGroup, State


@dp.message_handler(commands=['start', 'help'])
async def start_bot(message: types.Message):
    print(message.from_user.id, message.from_user.full_name, message.from_user.username)
    printl(message.from_user.id, message.from_user.full_name, message.from_user.username)
    photo = open('photo_2024-03-23 20.04.59.jpeg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption=f'''–ù–∞—à –ø—Ä–æ–µ–∫—Ç ¬´–°–æ–¥—Ä—É–∂–µ—Å—Ç–≤–æ –°–µ—Ä–¥–µ—Ü¬ªüá∑üá∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∂–µ–Ω –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –°–í–û, —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ–º–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –°–í–û –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∏—Ö –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–°–∞–π—Ç: https://sinergidobra.ru/

–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞¬ª: https://www.instagram.com/sinergidobra?igsh=NDUyb3AwbGYyOXFq

–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞¬ª: https://t.me/sinergidobra''')

    await bot.send_message(message.from_user.id,
                           f'''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
https://sinergidobra.ru/privacy
                           
–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –µ–≥–æ —É—Å–ª–æ–≤–∏—è–º–∏.''',
                           reply_markup=keyboard_next)


@dp.message_handler(Text(equals='üîù –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', ignore_case=True))
async def main(message: types.Message):
    photo = open('photo_2024-03-23 20.04.59.jpeg', 'rb')
    await bot.send_photo(message.from_user.id, photo=photo, caption=f'''–ù–∞—à –ø—Ä–æ–µ–∫—Ç ¬´–°–æ–¥—Ä—É–∂–µ—Å—Ç–≤–æ –°–µ—Ä–¥–µ—Ü¬ªüá∑üá∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∂–µ–Ω –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –°–í–û, —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ–º–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –°–í–û –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∏—Ö –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–°–∞–π—Ç: https://sinergidobra.ru/

–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞¬ª: https://www.instagram.com/sinergidobra?igsh=NDUyb3AwbGYyOXFq

–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞¬ª: https://t.me/sinergidobra''', reply_markup=ReplyKeyboardRemove())
    await bot.send_message(message.from_user.id,
                           f'''–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ

–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - —Ö–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å''',
                           reply_markup=keyboard_start_2)


@dp.message_handler(Text(equals='üîô –ù–∞–∑–∞–¥', ignore_case=True))
async def back(message: types.Message):
    await main(message)


@dp.message_handler(Text(equals='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', ignore_case=True))
async def get_contacts(message: types.Message):
    sent_message = await bot.send_message(message.from_user.id,'–°—É–ø–µ—Ä', reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(message.chat.id, sent_message.message_id)
    await bot.send_message(message.from_user.id,
                           f'''–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ

–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É - —Ö–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å''',
                           reply_markup=keyboard_start_2)
    printl(message.from_user.id, message.from_user.username, message.from_user.full_name)


@dp.message_handler(Text(equals='–°–æ—Ü—Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞', ignore_case=True))
async def get_contacts(message: types.Message):
    await bot.send_message(message.from_user.id, f'''–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º ¬´–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞ ¬ªü´∂üèªüá∑üá∫

–°–∞–π—Ç: https://sinergidobra.ru/

–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ ¬´–°–∏–Ω–µ—Ä–≥–∏—è –î–æ–±—Ä–∞¬ª: https://t.me/sinergidobra''', )


@dp.message_handler(Text(equals='–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã', ignore_case=True))
async def get_contact(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '''–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É''')
    await bot.send_message(message.from_user.id,
                           f'@darezeda')


@dp.callback_query_handler(lambda c: c.data.startswith(''))
async def process_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    data = callback_query.data
    if data == "–°–æ—Ü—Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞":
        await get_contacts(callback_query)
    elif data == "–•–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å":
        await course_for_beginners(callback_query)
    elif data == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ":
        await start_survey(callback_query)


class AnketForm(StatesGroup):
    name = State()
    age = State()
    theme = State()
    children = State()
    children_age = State()


@dp.message_handler(Text(equals='–•–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', ignore_case=True))
async def course_for_beginners(message: types.Message):
    await bot.send_message(message.from_user.id, f'–§–ò–û', reply_markup=keyboard_cancel)
    await AnketForm.name.set()


@dp.message_handler(Text(equals='—Ö–æ—á—É –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', ignore_case=True))
async def course_for_beginners_2(message: types.Message):
    await bot.send_message(message.from_user.id, f'–§–ò–û', reply_markup=keyboard_cancel)
    await AnketForm.name.set()


@dp.message_handler(state=AnketForm.name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç", reply_markup=keyboard_cancel)
    await AnketForm.next()


@dp.message_handler(state=AnketForm.age)
async def process_age(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['age'] = message.text
    await message.answer("–ñ–µ–ª–∞–µ–º–∞—è —Ç–µ–º–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞", reply_markup=keyboard_cancel)
    await AnketForm.next()


@dp.message_handler(state=AnketForm.theme)
async def process_theme(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['theme'] = message.text
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –¥–µ—Ç–∏?", reply_markup=keyboard_cancel)
    await AnketForm.next()


@dp.message_handler(state=AnketForm.children)
async def process_children(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['children'] = message.text
    if data['children'].lower() != '–Ω–µ—Ç':
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ (–¥–µ—Ç–µ–π)", reply_markup=keyboard_cancel)
        await AnketForm.next()
    else:
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—Éüå∏")
        await state.finish()


@dp.message_handler(state=AnketForm.children_age)
async def process_children_age(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    async with state.proxy() as data:
        data['children_age'] = message.text
        print(data)
    orders = Orders()
    orders.save_answer(message.from_user.id, message.from_user.username, data['name'], data['age'], data['theme'],
                       data['children'], data['children_age'])
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!", reply_markup=keyboard_start)
    await state.finish()


# //////////////////////////////////////////////////////////////////////////////////////

class AnketForm_2(StatesGroup):
    name = State()
    number = State()
    email = State()
    network = State()
    human = State()
    theme_2 = State()
    achievements = State()
    time = State()
    tool = State()
    tools = State()
    quantity = State()
    about = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ Anket_2Form
@dp.message_handler(Text(equals='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ', ignore_case=True))
async def start_survey(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–±–ª–∏–∂–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)',
                           reply_markup=keyboard_cancel)
    await AnketForm_2.name.set()


@dp.message_handler(Text(equals='–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ', ignore_case=True))
async def start_survey_2(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–±–ª–∏–∂–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)',
                           reply_markup=keyboard_cancel)
    await AnketForm_2.name.set()


@dp.message_handler(state=AnketForm_2.name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('''–í–∞—É, –∫–∞–∫–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è!ü§ç

–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü§ù

–û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—Å–µ–≥–æ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!üôèüèª''')
    await message.answer('''–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç: +79030000009)''', reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.number)
async def process_number(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['number'] = message.text
    await message.answer("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã: example@gmail.com)", reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.email)
async def process_email(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['email'] = message.text
    await message.answer("–°—Å—ã–ª–∫–∏ –Ω–∞ –í–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ (–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, –≤–∫, —Å–∞–π—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å))",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.network)
async def process_network(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['network'] = message.text
    await message.answer("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ  —Å–æ  –≤–∑—Ä–æ—Å–ª—ã–º–∏  –∏–ª–∏  –¥–µ—Ç—å–º–∏?", reply_markup=keyboard_cancel_age)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.human)
async def process_human(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return

    if message.text.lower() not in ["–≤–∑—Ä–æ—Å–ª—ã–µ", "–¥–µ—Ç–∏"]:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚Ä¶", reply_markup=keyboard_cancel_age)
        await state.set_state(AnketForm_2.human)
        return

    async with state.proxy() as data:
        data['human'] = message.text
    await message.answer('''–ö–∞–∫–∏–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ? (–∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ,  –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è,  –º—É–∑—ã–∫–∞, —Ä–∞–±–æ—Ç–∞  —Å —Ç–µ–ª–æ–º,   –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∞–Ω–∏–º–∞—Ü–∏—è,  –∂–∏–≤–æ–ø–∏—Å—å,  –º—É–∑—ã–∫–∞, –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
‚ú®
–ö–∞–∫–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏?''', reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.theme_2)
async def process_theme(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['theme'] = message.text
    await message.answer("–í–∞—à–∏ —Ä–µ–≥–∞–ª–∏–∏ (–ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∏–ø–ª–æ–º—ã, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.achievements)
async def process_achievements(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['achievements'] = message.text
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª–∏—Ç—Å—è –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ?", reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.time)
async def process_time(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['time'] = message.text
    await message.answer("–ù—É–∂–Ω—ã –ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞?",
                         reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.tool)
async def process_tool(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['tool'] = message.text
    await message.answer('''–ï—Å–ª–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã‚ú®
–ï—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–¥—ã - —Å—Ç–∞–≤—å—Ç–µ ¬´-¬ª''', reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.tools)
async def process_tools(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['tools'] = message.text
    await message.answer('''–°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?''', reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['quantity'] = message.text
    await message.answer("–û —Å–µ–±–µ:", reply_markup=keyboard_cancel)
    await AnketForm_2.next()


@dp.message_handler(state=AnketForm_2.about)
async def process_about(message: types.Message, state: FSMContext):
    if message.text.lower() == "üö´ –æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await main(message)
        return
    async with state.proxy() as data:
        data['about'] = message.text
        print(data)
    orders = Orders2()
    # user_id, username, name, number, email, network, theme, achievements, time, tool, tools, quantity, additional_info
    orders.save_answer(message.from_user.id, message.from_user.username, data['name'], data['number'], data['email'],
                       data['network'], data['human'], data['theme'], data['achievements'], data['time'], data['tool'],
                       data['tools'],
                       data['quantity'], data['about'])
    await message.answer('''–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞—è–≤–∫—Éüôèüèª
–ë—É–¥–µ–º —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—Éü§ù
–° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüíü''', reply_markup=keyboard_start)
    await state.finish()


def handlers_register(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands=['start', 'help'])
    dp.register_message_handler(start_survey, commands=['volunteering'])
    dp.register_message_handler(course_for_beginners, commands=['master_class'])
    dp.register_message_handler(get_contacts, commands=['networks'])
