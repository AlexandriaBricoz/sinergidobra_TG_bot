from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from create_bot import bot, bot_address, dp
from keyboards.client_kb import keyboard
from school_database import sqlite_db

"""–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
"""


# @dp.message_handler(commands=['start', 'help'])
async def start_bot(message: types.Message):
    bot_home = bot_address  # –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —Å—Ç—Ä–æ–∫–æ–π 't.me/bot'
    await bot.send_message(message.from_user.id,
                           f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, {message.from_user.full_name} üëã',
                           )
    await bot.send_message(message.from_user.id,
                           f'üóì –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ωüëáüëã',
                           reply_markup=keyboard)

    # await message.reply(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°: {bot_home}')


@dp.callback_query_handler(lambda c: c.data.startswith('button'))
async def process_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    data = callback_query.data
    if data == "button1":
        await callback_query.message.reply("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º —Å—Ç–∏–ª–µ–º –≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –π–æ–≥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º!")
    elif data == "button2":
        await callback_query.message.reply("–ö—É—Ä—Å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ - –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–π –ø—É—Ç—å –≤ –π–æ–≥–µ. –ú—ã –ø–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–µ–º—Å—è –Ω–∞ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤.")
    elif data == "button3":
        await callback_query.message.reply("–û–Ω–ª–∞–π–Ω-–∫–ª—É–± - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")
    elif data == "button4":
        await callback_query.message.reply("–û—Ñ–ª–∞–π–Ω-–∫–ª—É–± - –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∂–∏–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–ª—É–±—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∑–∞–Ω—è—Ç–∏—è–º–∏ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.")
    else:
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@dp.message_handler(Text(equals='–ö–æ–Ω—Ç–∞–∫—Ç—ã', ignore_case=True))
async def get_contacts(message: types.Message):
    address = "Yoga's Street, 00/00"
    phones = '+000 000-00-00'
    await bot.send_message(message.from_user.id, f'–ê–¥—Ä–µ—Å —à–∫–æ–ª—ã: {address} \n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {phones}')


# @dp.message_handler(Text(equals='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', ignore_case=True))
async def get_work_hours(message: types.Message):
    w_days = '–ø–Ω-–≤—Å'
    w_hours = '06.30‚Äì22.30'
    await bot.send_message(message.from_user.id, f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {w_days} {w_hours}')


# @dp.message_handler(Text(equals='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', ignore_case=True))
async def get_training_courses(message: types.Message):
    await sqlite_db.sql_read_from_courses(message)


# @dp.message_handler(Text(equals='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', ignore_case=True))
async def get_trainers_info(message: types.Message):
    await sqlite_db.sql_read_from_teachers(message)


def handlers_register(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands=['start', 'help'])
    dp.register_message_handler(get_contacts, Text(equals='–ö–æ–Ω—Ç–∞–∫—Ç—ã', ignore_case=True))
    dp.register_message_handler(get_work_hours, Text(equals='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', ignore_case=True))
    dp.register_message_handler(get_training_courses, Text(equals='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', ignore_case=True))
    dp.register_message_handler(get_trainers_info, Text(equals='–°—É–ø–µ—Ä', ignore_case=True))
